generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  password      String
  avatar        String?
  posts         Post[]
  payments      Payment[]
  subscriptions Subscription[]

  // Para recuperação de senha
  resetToken        String? // Token de redefinição de senha
  resetTokenExpires DateTime? // Expiração do token

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Payment {
  id              String  @id @default(uuid())
  userId          String?
  temporaryUserId String?
  user            User?   @relation(fields: [userId], references: [id])
  amount          Float
  currency        String
  status          String
  provider        String
  transactionId   String  @unique
  metadata        Json?

  createdAt DateTime @default(now())

  @@map("payments")
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  plan      String // "basic", "premium", "vip"
  status    String // "active", "canceled", "expired"
  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())

  @@map("subscriptions")
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String
  published  Boolean   @default(false)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("posts")
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}
